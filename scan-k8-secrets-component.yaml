- name: Scan app for Kubernetes Secret usage and authenticate to Conjur
  hosts: localhost
  gather_facts: false
  vars:
    policy_template_file: conjur_host_policy_template.j2
    policy_rendered_file: /tmp/conjur_app_path_policy.yaml

  tasks:
    # Step 1: Fetch deployment details from OpenShift API
    - name: Get deployment spec
      kubernetes.core.k8s_info:
        kind: Deployment
        api_version: apps/v1
        name: "{{ deployment_name }}"
        namespace: "{{ k8s_namespace }}"
        host: "https://{{ ocp_api_host }}"
        api_key: "{{ ocp_token }}"
        verify_ssl: false
      register: dep_info

    - name: Debug if deployment exists
      debug:
        msg: "❌ No deployment found with name '{{ deployment_name }}' in namespace '{{ k8s_namespace }}'."
      when: dep_info.resources | length == 0

    # Step 2: Extract secret references from the deployment
    - name: Extract referenced secrets from deployment
      set_fact:
        used_secrets: >-
          {{
            (
              dep_info.resources[0].spec.template.spec.containers
              | map('default', {}) | select('defined') | list
              | map(attribute='env') | map('default', []) | list | sum(start=[])
              | map(attribute='valueFrom') | select('defined')
              | map(attribute='secretKeyRef') | select('defined')
              | map(attribute='name')
            )
            +
            (
              dep_info.resources[0].spec.template.spec.volumes
              | default([]) | selectattr('secret.secretName', 'defined')
              | map(attribute='secret.secretName')
            )
          | list | unique }}
      when: dep_info.resources | length > 0

    # Step 3: Retrieve all secrets in namespace
    - name: Get all secrets in namespace
      kubernetes.core.k8s_info:
        kind: Secret
        api_version: v1
        namespace: "{{ k8s_namespace }}"
        host: "https://{{ ocp_api_host }}"
        api_key: "{{ ocp_token }}"
        verify_ssl: false
      register: all_secrets

    # Step 4: Print secret improvement suggestions
    - name: Suggest improvements
      debug:
        msg: |
          💡 Recommendations:
          {% for s in used_secrets %}
          - Secret '{{ s }}' might be a candidate for CyberArk Conjur integration.
            Consider replacing static secret with dynamic retrieval using the Secrets Provider sidecar or init container.
          {% endfor %}

    # Step 5: Authenticate to Conjur (API key + session token)
    - name: Login to Conjur (get API key)
      shell: >
        curl -s -k --user {{ conjur_username }}:{{ conjur_password }}
        https://{{ conjur_host }}/authn/{{ conjur_account }}/login
      register: conjur_login_response
      no_log: true

    - name: Authenticate to Conjur (get session token)
      shell: >
        curl -s -k --data '{{ conjur_login_response.stdout }}'
        https://{{ conjur_host }}/authn/{{ conjur_account }}/{{ conjur_username }}/authenticate
      register: conjur_session_token_raw
      no_log: true

    - name: Base64 encode the session token
      shell: |
        echo '{{ conjur_session_token_raw.stdout }}' | base64 | tr -d '\n'
      register: conjur_session_token_b64
      no_log: true

    # Step 6: Use the session token to list all Conjur resources (proof token works)
    - name: Call Conjur API to list all resources (conjur list)
      shell: >
        curl -s -k -H "Authorization: Token token=\"{{ conjur_session_token_b64.stdout }}\""
        https://{{ conjur_host }}/resources/{{ conjur_account }}
      register: conjur_list_output

    - name: Parse and extract Conjur resource IDs
      set_fact:
        conjur_resources: "{{ conjur_list_output.stdout | from_json | map(attribute='id') | list }}"

    - name: Show full Conjur resource list (formatted line by line)
      debug:
        var: conjur_resources

    # Step 7: Render policy from template
    - name: Render host policy from Jinja template
      template:
        src: "{{ policy_template_file }}"
        dest: "{{ policy_rendered_file }}"

    # Step 8: Read and decode the rendered policy
    - name: Read rendered policy file
      slurp:
        src: "{{ policy_rendered_file }}"
      register: policy_file_content

    # Step 9: POST the policy to Conjur (append mode)
    - name: Load host policy into Conjur
      uri:
        url: "https://{{ conjur_host }}/policies/{{ conjur_account }}/policy/root"
        method: POST
        headers:
          Authorization: "Token token=\"{{ conjur_session_token_b64.stdout }}\""
          Content-Type: "application/x-yaml"
        body: "{{ policy_file_content['content'] | b64decode }}"
        body_format: raw
        validate_certs: false
      register: policy_load_response
      failed_when: policy_load_response.status not in [200, 201]
      retries: 1
      delay: 2
      ignore_errors: true

    # Step 10: Retry with PUT if POST fails (replace mode)
    - name: Retry loading policy using PUT if POST failed
      uri:
        url: "https://{{ conjur_host }}/policies/{{ conjur_account }}/policy/root"
        method: PUT
        headers:
          Authorization: "Token token=\"{{ conjur_session_token_b64.stdout }}\""
          Content-Type: "application/x-yaml"
        body: "{{ policy_file_content['content'] | b64decode }}"
        body_format: raw
        validate_certs: false
      register: policy_put_response
      when: policy_load_response.status != 200

    # Step 11: Confirm host identity was created
    - name: Check if new host was added
      set_fact:
        new_host_id: "app-path/system:serviceaccount:{{ k8s_namespace }}:{{ service_account }}"

    - name: Validate host creation
      debug:
        msg: "✅ Host '{{ new_host_id }}' was successfully registered in Conjur."
      when: new_host_id in conjur_resources | join(',')

    # Step 12: Display outcome and CLI equivalent
    - name: Show policy load result (final status)
      debug:
        msg: >
          📝 Final policy load status:
          - POST status: {{ policy_load_response.status | default('N/A') }}
          - PUT retry status: {{ policy_put_response.status | default('N/A') }}

    - name: (CLI equivalent) Conjur policy load command
      debug:
        msg: "💡 Equivalent CLI: conjur policy load -f {{ policy_rendered_file }} -b root"
