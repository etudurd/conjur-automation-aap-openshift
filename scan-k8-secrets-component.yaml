- name: Scan app for Kubernetes Secret usage and authenticate to Conjur
  hosts: localhost
  gather_facts: false
  vars:
    policy_template_file: conjur_host_policy_template.j2
    policy_rendered_file: /tmp/conjur_app_path_policy.yaml
    variable_policy_template_file: conjur_variables_template.j2
    variable_policy_rendered_file: /tmp/conjur_generated_variables.yaml
    secrets_provider_patch_template_file: secrets_provider_patch_template.yaml.j2
    secrets_provider_config_file: /tmp/updated_deployment_with_provider.yaml
    conjur_ssl_cert_path: /tmp/conjur.pem

  tasks:
    # Step 0: Fetch Conjur certificate and render follower ConfigMap
    - name: Download Conjur public certificate
      shell: |
        openssl s_client -showcerts -connect {{ conjur_host }}:443 < /dev/null 2> /dev/null \
        | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > {{ conjur_ssl_cert_path }}
      args:
        executable: /bin/bash

    - name: Read Conjur certificate into memory
      slurp:
        src: "{{ conjur_ssl_cert_path }}"
      register: cert_raw

    - name: Create Conjur follower ConfigMap using k8s module with token auth
      kubernetes.core.k8s:
        state: present
        host: "https://{{ ocp_api_host }}"
        api_key: "{{ ocp_token }}"
        verify_ssl: false
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: follower-cm
            namespace: "{{ k8s_namespace }}"
          data:
            CONJUR_ACCOUNT: "{{ conjur_account }}"
            CONJUR_APPLIANCE_URL: "https://{{ conjur_host }}"
            CONJUR_SEED_FILE_URL: "https://{{ conjur_host }}/configuration/{{ conjur_account }}/seed/follower"
            AUTHENTICATOR_ID: "{{ authenticator_id }}"
            CONJUR_SSL_CERTIFICATE: "{{ cert_raw['content'] | b64decode }}"

    # Step 1: Fetch deployment details from OpenShift API
    - name: Get deployment spec
      kubernetes.core.k8s_info:
        kind: Deployment
        api_version: apps/v1
        name: "{{ deployment_name }}"
        namespace: "{{ k8s_namespace }}"
        host: "https://{{ ocp_api_host }}"
        api_key: "{{ ocp_token }}"
        verify_ssl: false
      register: dep_info

    - name: Debug if deployment exists
      debug:
        msg: "❌ No deployment found with name '{{ deployment_name }}' in namespace '{{ k8s_namespace }}'."
      when: dep_info.resources | length == 0

    # Step 2: Extract secret references from the deployment
    - name: Extract referenced secrets from deployment
      set_fact:
        used_secrets: >-
          {{
            (
              dep_info.resources[0].spec.template.spec.containers
              | map('default', {}) | select('defined') | list
              | map(attribute='env') | map('default', []) | list | sum(start=[])
              | map(attribute='valueFrom') | select('defined')
              | map(attribute='secretKeyRef') | select('defined')
              | map(attribute='name')
            )
            +
            (
              dep_info.resources[0].spec.template.spec.volumes
              | default([]) | selectattr('secret.secretName', 'defined')
              | map(attribute='secret.secretName')
            )
          | list | unique }}
      when: dep_info.resources | length > 0

    # Step 3: Retrieve all secrets in namespace
    - name: Get all secrets in namespace
      kubernetes.core.k8s_info:
        kind: Secret
        api_version: v1
        namespace: "{{ k8s_namespace }}"
        host: "https://{{ ocp_api_host }}"
        api_key: "{{ ocp_token }}"
        verify_ssl: false
      register: all_secrets

    - name: Extract keys from used secrets
      set_fact:
        secret_kv_pairs: >-
          {{ all_secrets.resources | selectattr('metadata.name', 'in', used_secrets)
                                   | map(attribute='data') | list
                                   | map('dict2items') | list | sum(start=[]) }}

    - name: Generate prefixed secret keys for Conjur (e.g., test-app-username)
      set_fact:
        conjur_prefixed_secret_keys: >-
          {{ secret_kv_pairs | map(attribute='key')
                             | map('regex_replace', '^(.*)$', deployment_name ~ '-secrets/\1') | list }}

    - name: Build secret name → value map with prefixed keys
      set_fact:
        conjur_prefixed_secret_map: >-
          {{ dict(
            conjur_prefixed_secret_keys | zip(
              secret_kv_pairs | map(attribute='value')
            )
          ) }}

    - name: Debug Conjur-prefixed secret map
      debug:
        var: conjur_prefixed_secret_map

    - name: Show decoded values before upload
      debug:
        msg: "{{ item.key }} → {{ item.value | b64decode }}"
      loop: >-
        {{ conjur_prefixed_secret_map | dict2items
                                     | rejectattr('value', 'equalto', '')
                                     | rejectattr('key', 'search', 'conjur-map$')
                                     | list }}

    - name: Set secret_keys for templating
      set_fact:
        secret_keys: "{{ conjur_prefixed_secret_keys }}"

    # Step 3.1: Patch application secret to use conjur-map
    - name: Patch application secret with conjur-map
      kubernetes.core.k8s:
        state: present
        host: "https://{{ ocp_api_host }}"
        api_key: "{{ ocp_token }}"
        verify_ssl: false
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: db-credentials
            namespace: "{{ k8s_namespace }}"
          type: Opaque
          stringData:
            conjur-map: |-
              {% for key in conjur_prefixed_secret_keys %}
              {{ key.split('/')[-1] }}: secrets/{{ key }}
              {% endfor %}

    # Step 4: Suggest improvements
    - name: Suggest improvements
      debug:
        msg: |
          💡 Recommendations:
          {% for s in used_secrets %}
          - Secret '{{ s }}' might be a candidate for CyberArk Conjur integration.
            Consider replacing static secret with dynamic retrieval using the Secrets Provider sidecar or init container.
          {% endfor %}

    # Step 5: Authenticate to Conjur (API key + session token)
    - name: Login to Conjur (get API key)
      shell: >
        curl -s -k --user {{ conjur_username }}:{{ conjur_password }}
        https://{{ conjur_host }}/authn/{{ conjur_account }}/login
      register: conjur_login_response
      no_log: true

    - name: Authenticate to Conjur (get session token)
      shell: >
        curl -s -k --data '{{ conjur_login_response.stdout }}'
        https://{{ conjur_host }}/authn/{{ conjur_account }}/{{ conjur_username }}/authenticate
      register: conjur_session_token_raw
      no_log: true

    - name: Base64 encode session token using Ansible filter
      set_fact:
        conjur_session_token_b64: "{{ conjur_session_token_raw.stdout | b64encode }}"

    # Step 6: List Conjur resources (verify token)
    - name: Call Conjur API to list all resources (conjur list)
      shell: >
        curl -s -k -H "Authorization: Token token=\"{{ conjur_session_token_b64 }}\""
        https://{{ conjur_host }}/resources/{{ conjur_account }}
      register: conjur_list_output

    - name: Parse and extract Conjur resource IDs
      set_fact:
        conjur_resources: "{{ conjur_list_output.stdout | from_json | map(attribute='id') | list }}"

    - name: Show full Conjur resource list (formatted line by line)
      debug:
        var: conjur_resources

    # Step 7: Render and load host identity policy
    - name: Render host policy from Jinja template
      template:
        src: "{{ policy_template_file }}"
        dest: "{{ policy_rendered_file }}"

    - name: Read rendered host policy file
      slurp:
        src: "{{ policy_rendered_file }}"
      register: policy_file_content

    - name: Load host policy into Conjur (POST)
      uri:
        url: "https://{{ conjur_host }}/policies/{{ conjur_account }}/policy/root"
        method: POST
        headers:
          Authorization: "Token token=\"{{ conjur_session_token_b64 }}\""
          Content-Type: "application/x-yaml"
        body: "{{ policy_file_content['content'] | b64decode }}"
        body_format: raw
        validate_certs: false
      register: policy_load_response
      failed_when: policy_load_response.status not in [200, 201]
      ignore_errors: true

    # Step 8: Confirm host identity created
    - name: Check if new host was added
      set_fact:
        new_host_id: "app-path/system:serviceaccount:{{ k8s_namespace }}:{{ service_account }}"

    - name: Validate host creation
      debug:
        msg: "✅ Host '{{ new_host_id }}' was successfully registered in Conjur."
      when: new_host_id in conjur_resources | join(',')

    # Step 9: Generate variable & grant policy
    - name: Render Conjur variable+grant policy from template
      template:
        src: "{{ variable_policy_template_file }}"
        dest: "{{ variable_policy_rendered_file }}"

    - name: Read rendered variable policy file
      slurp:
        src: "{{ variable_policy_rendered_file }}"
      register: variable_policy_file_content

    - name: Load secrets variable & access policy
      uri:
        url: "https://{{ conjur_host }}/policies/{{ conjur_account }}/policy/root"
        method: POST
        headers:
          Authorization: "Token token=\"{{ conjur_session_token_b64 }}\""
          Content-Type: "application/x-yaml"
        body: "{{ variable_policy_file_content['content'] | b64decode }}"
        body_format: raw
        validate_certs: false
      register: secret_policy_result
      failed_when: secret_policy_result.status not in [200, 201]

    # Step 3.2 (AFTER variable creation): Upload secret values to Conjur
    - name: Upload secret values to Conjur
      uri:
        url: "https://{{ conjur_host }}/secrets/{{ conjur_account }}/variable/{{ item.key }}"
        method: POST
        headers:
          Authorization: "Token token=\"{{ conjur_session_token_b64 }}\""
          Content-Type: "text/plain"
        body: "{{ item.value | b64decode }}"
        body_format: raw
        validate_certs: false
      loop: >-
        {{ conjur_prefixed_secret_map | dict2items
                                     | rejectattr('value', 'equalto', '')
                                     | rejectattr('key', 'search', 'conjur-map$')
                                     | list }}
      loop_control:
        label: "{{ item.key }}"
      register: secret_upload_result
      failed_when: secret_upload_result.status not in [200, 201]

    - name: Show uploaded secrets result
      debug:
        msg: |
          ✅ Secret uploaded: {{ item.item.key }} → Status: {{ item.status }}
      loop: "{{ secret_upload_result.results }}"
      when: item.status in [200, 201]

    # Step 10: Patch deployment to inject Secrets Provider
    - name: Render Secrets Provider patch
      template:
        src: "{{ secrets_provider_patch_template_file }}"
        dest: "{{ secrets_provider_config_file }}"

    - name: Patch application with Secrets Provider sidecar
      kubernetes.core.k8s:
        state: present
        host: "https://{{ ocp_api_host }}"
        api_key: "{{ ocp_token }}"
        verify_ssl: false
        src: "{{ secrets_provider_config_file }}"

    # Step 10.1: Create Kubernetes Role for secrets access
    - name: Create Role for Secrets Provider to access secrets
      kubernetes.core.k8s:
        state: present
        host: "https://{{ ocp_api_host }}"
        api_key: "{{ ocp_token }}"
        verify_ssl: false
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: secrets-access
            namespace: "{{ k8s_namespace }}"
          rules:
            - apiGroups: [""]
              resources: ["secrets"]
              verbs: ["get", "update"]

    # Step 10.2: Create RoleBinding to bind Role to the app ServiceAccount
    - name: Bind Role to ServiceAccount for Secrets Provider
      kubernetes.core.k8s:
        state: present
        host: "https://{{ ocp_api_host }}"
        api_key: "{{ ocp_token }}"
        verify_ssl: false
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: secrets-access-binding
            namespace: "{{ k8s_namespace }}"
          subjects:
            - kind: ServiceAccount
              name: "{{ service_account }}"
              namespace: "{{ k8s_namespace }}"
          roleRef:
            kind: Role
            name: secrets-access
            apiGroup: rbac.authorization.k8s.io

    # Step 11: Show policy and patch results
    - name: Show policy load result (final status)
      debug:
        msg: >
          📜 Final policy load status:
          - Host policy POST: {{ policy_load_response.status | default('N/A') }}
          - Variable policy POST: {{ secret_policy_result.status | default('N/A') }}

    - name: CLI equivalent commands
      debug:
        msg: |
          💡 Equivalent CLI:
          conjur policy load -f {{ policy_rendered_file }} -b root
          conjur policy load -f {{ variable_policy_rendered_file }} -b root
