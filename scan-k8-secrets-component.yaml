- name: Scan app for Kubernetes Secret usage and authenticate to Conjur
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Get deployment spec
      kubernetes.core.k8s_info:
        kind: Deployment
        api_version: apps/v1        
        name: "{{ deployment_name }}"
        namespace: "{{ k8s_namespace }}"
        host: "https://{{ ocp_api_host }}"
        api_key: "{{ ocp_token }}"
        verify_ssl: false
      register: dep_info

    - name: Extract referenced secrets from deployment
      set_fact:
        used_secrets: >-
          {{
            (
              dep_info.resources[0].spec.template.spec.containers
              | map('default', {}) | select('defined') | list
              | map(attribute='env') | map('default', []) | list | sum(start=[])
              | map(attribute='valueFrom') | select('defined')
              | map(attribute='secretKeyRef') | select('defined')
              | map(attribute='name')
            )
            +
            (
              dep_info.resources[0].spec.template.spec.volumes
              | default([]) | selectattr('secret.secretName', 'defined')
              | map(attribute='secret.secretName')
            )
          | list | unique
          }}

    - name: Get all secrets in namespace
      kubernetes.core.k8s_info:
        kind: Secret
        api_version: v1
        namespace: "{{ k8s_namespace }}"
        host: "https://{{ ocp_api_host }}"
        api_key: "{{ ocp_token }}"
        verify_ssl: false
      register: all_secrets

    - name: Show used vs available secrets
      debug:
        msg: |
          üîê Deployment "{{ deployment_name }}" is using these Kubernetes secrets:
          {% for s in used_secrets %}
          - {{ s }}
          {% endfor %}

          üì¶ Available Secrets in namespace "{{ k8s_namespace }}":
          {% for s in all_secrets.resources %}
          - {{ s.metadata.name }} (type: {{ s.type }})
          {% endfor %}

    - name: Show contents of used secrets (keys only, no values)
      vars:
        matched_secrets: >-
          {{
            all_secrets.resources
            | selectattr('metadata.name', 'in', used_secrets)
            | list
          }}
      debug:
        msg: |
          üîç Secret content breakdown for used secrets:
          {% for s in matched_secrets %}
          - Secret: {{ s.metadata.name }}
            Keys: {% for k in s.data.keys() %}{{ k }} {% endfor %}
          {% endfor %}

    - name: Suggest improvements
      debug:
        msg: |
          üí° Recommendations:
          {% for s in used_secrets %}
          - Secret '{{ s }}' might be a candidate for CyberArk Conjur integration.
            Consider replacing static secret with dynamic retrieval using the Secrets Provider sidecar or init container.
          {% endfor %}

    # üëá Conjur Authentication Flow

    - name: Login to Conjur (get API key)
      shell: >
        curl -s -k --user {{ conjur_username }}:{{ conjur_password }}
        https://{{ conjur_host }}/authn/{{ conjur_account }}/login
      register: conjur_login_response
      no_log: true  # Hide sensitive output

    - name: Authenticate with API key (get session token)
      shell: >
        curl -s -k --data '{{ conjur_login_response.stdout }}'
        https://{{ conjur_host }}/authn/{{ conjur_account }}/{{ conjur_username }}/authenticate
      register: conjur_session_token_raw
      no_log: true

    - name: Base64 encode the session token
      shell: |
        echo '{{ conjur_session_token_raw.stdout }}' | base64 | tr -d '\n'
      register: conjur_session_token_b64
      no_log: true

    - name: Show Authorization header for future Conjur API calls
      debug:
        msg: |
          üîê Use this Authorization header:

          Authorization: Token token="{{ conjur_session_token_b64.stdout }}"
